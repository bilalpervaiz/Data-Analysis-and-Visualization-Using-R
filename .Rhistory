hello <- function() {
print("Hello, world!")
}
# Simple vector
nums <- c(1, 2, 3, 4, 5)
print(nums)
mean(nums)
sum(nums)
for (n in nums){
print(paste("Number is",n))
}
#Loop
for (n in nums){
print("Number is",n)
}
print(paste("Number is",n))
#Loop
for (n in nums){
print(paste("Number is",n))
}
for (n in nums){
print(paste("Number is",n))
}
# Conditional
for (n in nums) {
if (n %% 2 == 0) {
print(paste(n, "is even"))
} else {
print(paste(n, "is odd"))
}
}
df <- data.frame(
Name = c("A", "B", "C"),
Value = c(10, 20, 30)
)
View(df)
# View data
print(df)
summary(df)
df[df$value > 15]
df[df$Value > 15, ]
# Add new column
df$Squared <- df$Value^2
print(df
View(df)
View(df)
df$percent <- df$Squared * 100
print(df)
View(df)
write.csv(df, "output.csv", row.names = FALSE)
)
df2 <- data.frame(
x=c(1,3,4),
y=c(4,5,6)
)
data <- read.csv("output.csv")
head(data)        # First 6 rows
summary(data)
library(sf)
# Read shapefile
shp <- st_read("hotosm_pse_health_facilities_polygons_shp")
# Read shapefile
shp <- st_read("hotosm_pse_health_facilities_polygons_shp.shp")
print(shp)
# Plot shapefile
plot(shp)
# Filter by attribute
subset_shp <- shp[shp$healthcare ='hospital', ]
# Filter by attribute
subset_shp <- shp[shp$healthcare = hospital, ]
names(shp)
unique(shp$healthcare)        # See all unique values in that column
subset_shp <- shp[shp$healthcare == "hospital", ]
plot(subset_shp)
library(terra)
# Read raster
r <- rast("Patch 8.tif")
print(r)
plot(r)
# Basic stats
minmax(r)
mean(values(r), na.rm = TRUE)
library(ggplot2)
# Example data
df3 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Scatter plot
ggplot(df3, aes(x = x, y = y)) +
geom_point(color = "blue", size = 3) +
labs(title = "Scatter Plot", x = "X-axis", y = "Y-axis")
df4 <- data.frame(
year = 2000:2010,
value = c(3, 4, 6, 8, 7, 9, 12, 15, 14, 18, 20)
)
ggplot(df4, aes(x = year, y = value)) +
geom_line(color = "red", size = 1.2) +
geom_point(size = 3) +
labs(title = "Yearly Values")
# Bar chart
df5 <- data.frame(
category = c("A", "B", "C"),
count = c(10, 23, 15)
)
ggplot(df5, aes(x = category, y = count, fill = category)) +
geom_bar(stat = "identity") +
labs(title = "Bar Plot Example")
df6 <- data.frame(
group = rep(c("A", "B"), each = 10),
value = c(rnorm(10, mean = 5), rnorm(10, mean = 7))
)
ggplot(df6, aes(x = group, y = value, fill = group)) +
geom_boxplot() +
labs(title = "Boxplot Example")
# Read shapefile
shp <- st_read("hotosm_pse_health_facilities_polygons_shp.shp")
print(shp)
# Plot all features
ggplot() +
geom_sf(data = shp, fill = "lightblue", color = "black") +
labs(title = "Health Facilities Map")
subset_shp <- shp[shp$healthcare == "hospital", ]
#plot(subset_shp)
# Filter and plot only hospitals
ggplot() +
geom_sf(data = subset_shp, fill = "red", color = "black") +
labs(title = "Hospitals")
library(ggspatial)   # for basemap tiles
# Read shapefile
shp <- st_read("hotosm_pse_health_facilities_polygons_shp.shp")
print(shp)
# Plot all features
ggplot() +
annotation_map_tile(type = "osm", zoomin = 0) +  # OSM basemap
geom_sf(data = shp, fill = "lightblue", color = "black") +
labs(title = "Health Facilities Map")
# Read shapefile
shp <- st_read("hotosm_pse_health_facilities_polygons_shp.shp")
print(shp)
# Plot all features
ggplot() +
annotation_map_tile(type = "osm", zoomin = 0) +  # OSM basemap
geom_sf(data = hospitals, aes(color = healthcare), size = 2) +
scale_color_manual(values = c("hospital" = "red")) +
labs(title = "Hospitals with OSM Basemap") +
theme_minimal()
# Read shapefile
shp <- st_read("hotosm_pse_health_facilities_polygons_shp.shp")
print(shp)
# Plot all features
ggplot() +
annotation_map_tile(type = "osm", zoomin = 0) +  # OSM basemap
geom_sf(data = hospitals, aes(color = healthcare), size = 2) +
scale_color_manual(values = c("subset_shp" = "red")) +
labs(title = "Hospitals with OSM Basemap") +
theme_minimal()
# Read shapefile
shp <- st_read("hotosm_pse_health_facilities_polygons_shp.shp")
print(shp)
# Plot all features
ggplot() +
annotation_map_tile(type = "osm", zoomin = 0) +  # OSM basemap
geom_sf(data = shp, aes(color = healthcare), size = 2) +
scale_color_manual(values = c("hospital" = "red")) +
labs(title = "Hospitals with OSM Basemap") +
theme_minimal()
# This script provides practice code for key R libraries relevant to the OpenGeoHub position.
# It now includes a visualization aspect to help you inspect and understand the data.
# You will need to install the following packages if you don't have them already.
# install.packages(c("dplyr", "data.table", "sf", "terra", "caret", "ggplot2"))
# --- 1. Data Manipulation with dplyr and data.table ---
# Both libraries are essential for efficient data handling.
# dplyr is known for its clear syntax, while data.table is often faster for large datasets.
library(dplyr)
library(data.table)
library(ggplot2)
# Create a sample data frame using data.table for efficiency
dt <- data.table(
id = 1:100,
band1 = runif(100, 0, 1), # Represents a remote sensing band (e.g., Red)
band2 = runif(100, 0, 1), # Represents another band (e.g., Near-Infrared)
type = sample(c("forest", "water", "urban"), 100, replace = TRUE)
)
print("Original data.table sample:")
print(head(dt))
# Use dplyr to perform a sequence of operations (the "tidyverse" approach)
# Calculate NDVI (Normalized Difference Vegetation Index) and group by land type
dt_manipulated <- dt %>%
mutate(ndvi = (band2 - band1) / (band2 + band1)) %>%
filter(type != "urban") %>%
group_by(type) %>%
summarise(
mean_ndvi = mean(ndvi, na.rm = TRUE),
count = n()
)
print("\nData after manipulation with dplyr:")
print(dt_manipulated)
# --- VISUALIZATION for Data Manipulation ---
# Use ggplot2 to visualize the mean NDVI for each land type.
# This helps quickly understand the results of your data processing.
ggplot(dt_manipulated, aes(x = type, y = mean_ndvi, fill = type)) +
geom_bar(stat = "identity") +
labs(
title = "Mean NDVI by Land Cover Type",
x = "Land Cover Type",
y = "Mean NDVI"
) +
theme_minimal() +
scale_fill_brewer(palette = "Set2")
print("\nPlot of 'Mean NDVI by Land Cover Type' has been generated.")
# --- 2. Geospatial Data with sf (Simple Features) ---
# The sf library is the modern standard for working with vector data (points, lines, polygons).
# It's an important tool to know for geoinformatics.
library(sf)
# Create a simple data frame for some points of interest
poi_data <- data.frame(
name = c("Location A", "Location B"),
lat = c(40.7, 51.5),
lon = c(-74.0, -0.1)
)
# Convert the data frame to an sf object (Simple Features)
# This requires specifying the coordinates and the CRS (Coordinate Reference System)
poi_sf <- st_as_sf(poi_data, coords = c("lon", "lat"), crs = "EPSG:4326")
print("\nSimple Features object (points):")
print(poi_sf)
# Create a simple polygon (e.g., a city boundary)
london_boundary <- st_polygon(list(matrix(c(-0.2, 51.4, -0.2, 51.6, 0.0, 51.6, 0.0, 51.4, -0.2, 51.4), ncol = 2, byrow = TRUE)))
london_sf <- st_sf(data.frame(city = "London", geometry = st_sfc(london_boundary, crs = "EPSG:4326")))
print("\nSimple Features object (polygon):")
print(london_sf)
# Perform a spatial operation: check if a point is within a polygon
is_in_london <- st_intersects(poi_sf, london_sf, sparse = FALSE)
print("\nIs each point in the 'London' polygon?")
print(is_in_london)
# --- VISUALIZATION for Vector Data ---
# Plot the polygon and the points on the same map.
# This visually confirms the spatial intersection.
plot(st_geometry(london_sf), main = "Points of Interest vs. City Boundary")
plot(st_geometry(poi_sf), add = TRUE, col = "red", pch = 19)
print("\nPlot of 'Points of Interest vs. City Boundary' has been generated.")
# --- 3. Raster Data with terra ---
# The terra library is the successor to the raster package and is highly optimized
# for working with large raster datasets (like satellite images).
library(terra)
# Create a sample raster from scratch
# This simulates a single band of an Earth Observation image
raster_mat <- matrix(runif(100, 0, 1), nrow = 10, ncol = 10)
raster_obj <- rast(raster_mat,
xmin = -180, xmax = 180,
ymin = -90, ymax = 90,
crs = "EPSG:4326")
# Create a sample raster from scratch
# This simulates a single band of an Earth Observation image
raster_mat <- matrix(runif(100, 0, 1), nrow = 10, ncol = 10)
raster_obj <- rast(raster_mat,
xmin = -180, xmax = 180,
ymin = -90, ymax = 90,
crs = "EPSG:4326")
average <- function(a, b) {
a + b / 2
}
print(average(2, 1))
hello <- function() {
print("Hello, world!")
}
# Simple vector
nums <- c(1, 2, 3, 4, 5)
print(nums)
# Mean and sum
mean(nums)
sum(nums)
#Loop
for (n in nums){
print(paste("Number is",n))
}
# Conditional
for (n in nums) {
if (n %% 2 == 0) {
print(paste(n, "is even"))
} else {
print(paste(n, "is odd"))
}
}
# Dataframes
df <- data.frame(
Name = c("A", "B", "C"),
Value = c(10, 20, 30)
)
df2 <- data.frame(
x=c(1,3,4),
y=c(4,5,6)
)
# View data
print(df)
summary(df)
df[df$Value > 15, ]
# Add new column
df$Squared <- df$Value^2
print(df)
df$percent <- df$Squared * 100
print(df)
write.csv(df, "output.csv", row.names = FALSE)
data <- read.csv("output.csv")
head(data)        # First 6 rows
summary(data)
library(sf)
# Read shapefile
shp <- st_read("hotosm_pse_health_facilities_polygons_shp.shp")
print(shp)
# Plot all features
ggplot() +
geom_sf(data = shp, fill = "lightblue", color = "black") +
labs(title = "Health Facilities Map")
